{"version":3,"file":"component---src-pages-engagements-mdx-b80ba0d07604b74a985b.js","mappings":"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","sources":["webpack://glospoliceband.org/./src/components/engagements.tsx","webpack://glospoliceband.org/./src/pages/engagements.mdx","webpack://glospoliceband.org/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["import { Disclosure } from \"@headlessui/react\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\ninterface MuzodoEvent {\n  GUID: string;\n  Name: string;\n  Confirmed: 0 | 1;\n  Cancelled: 0 | 1;\n  EventType: \"PUBLIC\" | \"PRIVATE\" | \"REHEARSAL\" | \"MEETING\";\n  Address: string;\n  MapUrl: string;\n  FormattedDate: string;\n  FormattedArriveTime: string;\n  FormattedStartTime: string;\n  FormattedEndTime: string;\n  CreateDateTime: Date;\n}\n\nconst fetchData = async (\n  setData: (data: MuzodoEvent[]) => void,\n  setError: (error: string) => void,\n  setLoading: (loading: boolean) => void\n) => {\n  fetch(\n    `https://www.muzodo.com/api/v1/group/BA71404D-C196-A266-2BBF-0A6C705FDB4C/events?displayFrom`\n  )\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        if (result.Status) {\n          setError(result.Message);\n          setLoading(false);\n        } else {\n          setData(result);\n          setLoading(false);\n        }\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        setError(error);\n        setLoading(false);\n      }\n    );\n};\n\ninterface EngagementsTableProperties {\n  engagements: MuzodoEvent[];\n}\n\nconst EngagementsTable = ({ engagements }: EngagementsTableProperties) => (\n  <table className=\"table-auto\">\n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Start Time</th>\n        <th>End Time</th>\n        <th>Name</th>\n        <th>Address</th>\n        <th>Map Link</th>\n      </tr>\n    </thead>\n    <tbody>\n      {engagements.map((event: MuzodoEvent) => (\n        <tr key={event.GUID}>\n          <td>{event.FormattedDate}</td>\n          <td>{event.FormattedStartTime}</td>\n          <td>{event.FormattedEndTime}</td>\n          <td>{event.Name}</td>\n          <td>{event.Address}</td>\n          <td>{event.MapUrl && <a href={event.MapUrl}>{event.MapUrl}</a>}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nconst EngagementsList = ({ engagements }: EngagementsTableProperties) => (\n  <ul className=\"list-none\">\n    {engagements.map((event: MuzodoEvent) => (\n      <li>\n        <h2 className=\"text-sm\">\n          {event.FormattedDate} - {event.Name}\n        </h2>\n        <p className=\"text-sm\">\n          {event.FormattedStartTime} - {event.FormattedEndTime}\n        </p>\n        <p className=\"text-sm\">{event.Address}</p>\n        <p className=\"text-sm\">\n          {event.MapUrl && <a href={event.MapUrl}>{event.MapUrl}</a>}\n        </p>\n      </li>\n    ))}\n  </ul>\n);\n\nexport const Engagements = () => {\n  const [data, setData] = useState([] as MuzodoEvent[]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    fetchData(setData, setError, setLoading);\n  }, []);\n\n  if (loading) {\n    return <p>Loading ...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  return (\n    <>\n      <div className=\"block md:hidden\">\n        <EngagementsList engagements={data} />\n      </div>\n      <div className=\"hidden md:block\">\n        <EngagementsTable engagements={data} />\n      </div>\n    </>\n  );\n};\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Engagements} from \"../components/engagements.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Engagements Calendar\"), \"\\n\", React.createElement(_components.p, null, \"Our latest concert and events calendar is below, more dates will be added as they are booked.\"), \"\\n\", React.createElement(_components.p, null, \"Please check back regularly for the latest updates and information and any last-minute changes to time/venue.\"), \"\\n\", React.createElement(Engagements), \"\\n\", React.createElement(_components.h2, null, \"General Notes\"), \"\\n\", React.createElement(_components.p, null, \"Timings shown above are for playing, members should arrive at least 30 minutes earlier to set up.\"), \"\\n\", React.createElement(_components.p, null, \"Directions are provided as a rough guide only - the Band will not be held responsible for your late arrival, any incidents with angry farmers through whose fields you are driving, or for you turning up on the right day at the right time but at a venue of the same name in a different part of the country...\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["EngagementsTable","_ref","engagements","React","className","map","event","key","GUID","FormattedDate","FormattedStartTime","FormattedEndTime","Name","Address","MapUrl","href","EngagementsList","_ref2","Engagements","data","setData","useState","loading","setLoading","error","setError","useEffect","async","fetch","then","res","json","result","Status","Message","fetchData","_createMdxContent","props","_components","Object","assign","h1","p","h2","_provideComponents","components","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}