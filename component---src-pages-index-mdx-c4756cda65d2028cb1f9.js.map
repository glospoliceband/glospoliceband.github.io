{"version":3,"file":"component---src-pages-index-mdx-c4756cda65d2028cb1f9.js","mappings":"gLAKA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,gDAAiD,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,0HAA2H,KAAMG,EAAAA,cAAoBC,EAAAA,IAAiB,KAAMD,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,+PAAgQ,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,0QAA2Q,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,8XAA+X,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,oGAAqG,KAAMG,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,6DAA8DG,EAAAA,cAAoB,IAAK,CAChpDE,KAAM,wCACL,gCAAiC,KAAM,KAAMF,EAAAA,cAAoBP,EAAYI,EAAG,KAAM,qCAAsCG,EAAAA,cAAoBG,EAAAA,GAAM,CACvJC,GAAI,UACH,0BACL,CAKA,UAJA,SAAoBZ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOa,QAASC,GAAaZ,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOO,EAAYN,EAAAA,cAAoBM,EAAWd,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECQA,MAAMe,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBV,GAC/B,MAAMW,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfT,EACFA,EAAWW,GAGb,IAAIA,KAAsBX,EACnC,GACA,CAACW,EAAmBX,GAExB,C","sources":["webpack://glospoliceband.org/./src/pages/index.mdx","webpack://glospoliceband.org/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {Link} from \"gatsby\";\nimport {GlosPoliceBand} from \"../components/images.tsx\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"The Band of the Gloucestershire Constabulary\"), \"\\n\", React.createElement(_components.p, null, \"Welcome to the website of The Band of the Gloucestershire Constabulary, also known as the Gloucestershire Police Band.\"), \"\\n\", React.createElement(GlosPoliceBand), \"\\n\", React.createElement(_components.p, null, \"The Band of the Gloucestershire Constabulary is based in Cheltenham.\\nMembers include a mixture of former police officers, civilians working for the Police & people with absolutely no Police connection –\\nyou don’t have to be a Police Officer to join!\"), \"\\n\", React.createElement(_components.p, null, \"Although we do not participate in brass band contests we strive to produce high quality musical performances at a range of events\\nincluding concerts (often supporting a charity), bandstands and fetes; Pershore Midsummer Brass has become a highlight of the year.\"), \"\\n\", React.createElement(_components.p, null, \"We support the Gloucestershire Constabulary at several events including the Emergency Services Carol Service\\n(either in Gloucester Cathedral or Tewkesbury Abbey) and the Constabulary Open Day.\\nWe are privileged to support The Royal British Legion at their annual Festival of Remembrance and have had the\\nopportunity to perform at several other events in Gloucester Cathedral.\"), \"\\n\", React.createElement(_components.p, null, \"We practise in Cheltenham on a Thursday night and we're always open to new players and visitors.\"), \"\\n\", React.createElement(_components.p, null, \"For more information please contact the band secretary at \", React.createElement(\"a\", {\n    href: \"mailto: secretary@glospoliceband.org\"\n  }, \"secretary@glospoliceband.org\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Our recent CD is still available, \", React.createElement(Link, {\n    to: \"cdinfo\"\n  }, \"A Night at the Movies\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} props\n *   Props.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(props) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (props.disableParentContext) {\n    allComponents =\n      typeof props.components === 'function'\n        ? props.components(emptyComponents)\n        : props.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(props.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    props.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","React","GlosPoliceBand","href","Link","to","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}